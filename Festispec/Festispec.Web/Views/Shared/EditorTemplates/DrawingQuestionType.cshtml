@model Festispec.Web.Models.Questions.Types.DrawingQuestionType

<style>
    body {
        overflow-x: hidden;
    }

    .draw-question {
        position: relative;
        display: inline-block;
        user-select: none;
    }

        .draw-question .inkt {
            height: 5px;
            width: 5px;
            background-color: red;
            position: absolute;
        }
</style>

@{
    var base64 = Convert.ToBase64String(@Model.Details.Images[0]);
    var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
}

<div id="draw-canvas-@Model.Id" class="draw-question">
    <img src="@imgSrc">
    <input type="hidden" name="draw-canvas-@Model.Id">
</div>

<script>
    class DrawQuestion {

        constructor(id) {
            this.scope = document.querySelector(id);
            this.canDraw = false;
            this.addListeners();
            this.drawings = [];
        }

        addListeners() {
            this.scope.addEventListener('mousedown', (event) => {
                this.canDraw = true;
            });
            this.scope.addEventListener('mouseup', (event) => {
                this.canDraw = false;
            });
            this.scope.addEventListener('mousemove', (event) => {
                let target = event.target;
                var rect = target.getBoundingClientRect();
                let x = event.clientX - rect.left; //x position within the element.
                let y = event.clientY - rect.top;  //y position within the element.
                this.handleEvent(x, y);
            });
            this.scope.addEventListener('touchmove', (event) => {
                var x = event.touches[0].clientX;
                var y = event.touches[0].clientY;
                this.handleEvent(x, y);
            })
        }

        handleEvent(x, y) {
            if (this.canDraw === false) {
                return;
            }
            let inkt = document.createElement('div');
            inkt.className = "inkt";
            inkt.style.top = y + "px";
            inkt.style.left = x + "px";

            this.scope.appendChild(inkt);
            this.drawings.push({
                "x": x,
                "y": y,
            });
            this.scope.querySelector("input").value = JSON.stringify(this.drawings);
        }

    }
    new DrawQuestion("draw-canvas-@Model.Id");
</script>








@*<div style="display: inline-block; border: 1px solid black; background: url('../../@Model.ImageUrl'); background-size: contain; width: 30%; height: 30%; background-position:center; background-repeat: no-repeat;">
        <canvas id="draw-canvas-@Model.Id" max-width="400" max-height="400">
        </canvas>
    </div>*@

@*<script>
        var canvas = new fabric.Canvas('draw-canvas-@Model.Id');
        canvas.isDrawingMode = true;
        canvas.freeDrawingBrush.width = 3;
        canvas.freeDrawingBrush.color = "#ff0000";
        canvasDict.addCanvas(canvas, @Model.Id);
    </script>*@